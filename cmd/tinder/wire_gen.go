// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/application"
	account2 "github.com/Chengxufeng1994/hw-mock-tinder-api/internal/application/service/account"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/application/service/authn"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/application/service/hello"
	user2 "github.com/Chengxufeng1994/hw-mock-tinder-api/internal/application/service/user"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/domain/auth/service"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/infrastructure"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/infrastructure/cache"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/infrastructure/client"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/infrastructure/config"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/infrastructure/db"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/infrastructure/oauth"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/infrastructure/persistence/gorm/account"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/infrastructure/persistence/gorm/auth"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/infrastructure/persistence/gorm/user"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/infrastructure/ratelimiter"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/infrastructure/server"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/infrastructure/transaction"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/infrastructure/ws"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/internal/interfaces"
	"github.com/Chengxufeng1994/hw-mock-tinder-api/pkg/logging"
)

// Injectors from wire.go:

func InitializeApplication(logger logging.Logger, config2 *config.Config) (app, func(), error) {
	configServer := infrastructure.ProviderServerConfig(config2)
	helloService := hello.NewHelloService(logger)
	configAuth := infrastructure.ProviderAuthConfig(config2)
	database := infrastructure.ProviderDatabaseConfig(config2)
	gormDB, cleanup, err := db.NewDB(database)
	if err != nil {
		return app{}, nil, err
	}
	transactionManager := transaction.NewTransactionManager(gormDB)
	accountRepository := account.NewAccountRepository(transactionManager)
	accountService := account2.NewAccountService(logger, accountRepository)
	accountClient := client.NewAccountClient(accountService)
	userRepository := user.NewUserRepository(transactionManager)
	interestRepository := user.NewInterestRepository(transactionManager)
	matchRepository := user.NewMatchRepository(transactionManager)
	chatRepository := user.NewChatRepository(transactionManager)
	hub := ws.NewHub(logger)
	userService := user2.NewUserService(logger, transactionManager, userRepository, interestRepository, matchRepository, chatRepository, hub)
	userClient := client.NewUserClient(userService)
	facebookProviderOptions := infrastructure.ProviderFacebookProviderOptionsFromConfig(config2)
	facebookProvider := oauth.NewFacebookProvider(facebookProviderOptions)
	tokenService := service.NewJWTTokenService(configAuth)
	otpRepository := auth.NewOTPRepository(transactionManager)
	configCache := infrastructure.ProviderCacheConfig(config2)
	cacheCache := cache.NewCache(configCache)
	authenticateService := authn.NewAuthenticateService(logger, configAuth, accountClient, userClient, facebookProvider, tokenService, otpRepository, transactionManager, cacheCache)
	applicationService := application.ProviderService(helloService, authenticateService, accountService, userService)
	limiter := infrastructure.ProviderUberRateLimiter()
	uberRateLimiter := ratelimiter.NewUberRateLimiter(limiter)
	handler := interfaces.ProviderRouter(logger, config2, applicationService, uberRateLimiter, hub)
	serverServer := server.NewServer(logger, configServer, handler)
	mainApp := newApp(serverServer, hub)
	return mainApp, func() {
		cleanup()
	}, nil
}
